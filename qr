import pandas as pd
import numpy as np
from sklearn.linear_model import QuantileRegressor
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import OrdinalEncoder
from sklearn.metrics import mean_absolute_error
import matplotlib.pyplot as plt

# ========== 1. 参数 ==========
target_col = 'target'
categorical_cols = [...]  # 例如 ['claim_type']
feature_cols = [...]      # 用于建模的特征（包含分类变量）

# ========== 2. 编码分类变量 ==========
encoder = OrdinalEncoder()

def encode_df(df, fit=False):
    df_copy = df.copy()
    if fit:
        df_copy[categorical_cols] = encoder.fit_transform(df_copy[categorical_cols])
    else:
        df_copy[categorical_cols] = encoder.transform(df_copy[categorical_cols])
    return df_copy

# ========== 3. 拆分训练/验证 ==========
df_encoded = encode_df(df, fit=True)
X = df_encoded[feature_cols]
y = df_encoded[target_col]

X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=0.2, random_state=42)

# ========== 4. 训练 QuantileRegressor ==========
quantiles = [0.1, 0.5, 0.9]
models = {}

for q in quantiles:
    model = QuantileRegressor(quantile=q, alpha=0, solver='highs')  # alpha=0 无正则
    model.fit(X_train, y_train)
    models[q] = model

# ========== 5. 验证集预测 + 输出 ==========
for q in quantiles:
    col_name = f'predicted_q{int(q*100)}'
    df_encoded[col_name] = models[q].predict(X)

# ========== 6. OOT 数据推理（可选） ==========
df_oot_encoded = encode_df(df_oot, fit=False)
X_oot = df_oot_encoded[feature_cols]

for q in quantiles:
    col_name = f'predicted_q{int(q*100)}'
    df_oot_encoded[col_name] = models[q].predict(X_oot)







plt.figure(figsize=(8, 5))
plt.scatter(df_encoded['predicted_q50'], y, alpha=0.4, label='Median Prediction')
plt.plot([y.min(), y.max()], [y.min(), y.max()], 'r--', label='y = ŷ')
plt.xlabel('Predicted (q50)')
plt.ylabel('Actual')
plt.title('Quantile Regression (Median)')
plt.legend()
plt.grid(True)
plt.show()
