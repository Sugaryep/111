import pandas as pd
import xgboost as xgb
import optuna
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
import numpy as np

# 假设你的数据是 df，目标列名是 'target'，分类列名列表是 categorical_cols
# 1. 转换分类变量为 pandas 的 Categorical 类型
for col in categorical_cols:
    df[col] = df[col].astype('category')

# 2. 拆分训练集和验证集
X = df.drop(columns=['target'])
y = df['target']
X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=0.2, random_state=42)

# 3. 定义 Optuna 目标函数
def objective(trial):
    params = {
        'objective': 'reg:squarederror',
        'eval_metric': 'rmse',
        'tree_method': 'hist',
        'enable_categorical': True,
        'learning_rate': trial.suggest_float('learning_rate', 0.01, 0.3),
        'max_depth': trial.suggest_int('max_depth', 3, 10),
        'min_child_weight': trial.suggest_float('min_child_weight', 1e-3, 10.0),
        'subsample': trial.suggest_float('subsample', 0.5, 1.0),
        'colsample_bytree': trial.suggest_float('colsample_bytree', 0.5, 1.0),
        'lambda': trial.suggest_float('lambda', 1e-3, 10.0),
        'alpha': trial.suggest_float('alpha', 1e-3, 10.0),
    }

    dtrain = xgb.DMatrix(X_train, label=y_train, enable_categorical=True)
    dvalid = xgb.DMatrix(X_valid, label=y_valid, enable_categorical=True)

    booster = xgb.train(
        params,
        dtrain,
        num_boost_round=1000,
        evals=[(dvalid, "valid")],
        early_stopping_rounds=50,
        verbose_eval=False
    )

    preds = booster.predict(dvalid)
    rmse = mean_squared_error(y_valid, preds, squared=False)  # 取 RMSE
    return rmse

# 4. 运行 Optuna
study = optuna.create_study(direction='minimize')  # 回归任务最小化误差
study.optimize(objective, n_trials=50)

print("Best trial:")
print(study.best_trial.params)

# 5. 使用最佳参数训练最终模型
best_params = study.best_trial.params
best_params.update({
    'objective': 'reg:squarederror',
    'eval_metric': 'rmse',
    'tree_method': 'hist',
    'enable_categorical': True
})

# 用全部数据训练最终模型
dtrain_full = xgb.DMatrix(X, label=y, enable_categorical=True)
final_model = xgb.train(best_params, dtrain_full, num_boost_round=study.best_trial.number)

# 保存模型
final_model.save_model("xgb_regression_optuna_model.json")
